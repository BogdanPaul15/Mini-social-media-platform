/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import com.google.gson.Gson;
import java.util.ArrayList;

import static TemaTest.Comentariu.getComment;
import static TemaTest.JsonHandler.*;
import static TemaTest.Postare.*;
import static TemaTest.Utilizator.*;

public class App {

    public static ArrayList<Utilizator> Users;
    public static ArrayList<Postare> Posts;
    public static ArrayList<Comentariu> Comments;
    public static final String usersFilePath = "users.json";
    public static final String postsFilePath = "posts.json";
    public static final String commentsFilePath = "comments.json";
    // Trim and get the actual parameter inside of single quotes
    public static String getParam(String text) {
        return text.substring(text.indexOf("'") + 1, text.lastIndexOf("'"));
    }
    // Replace double quotes with single ones
    public static String replaceWithSingle(String input) {
        return input.replace("\"", "'").replace("[", " [");
    }
    // Wrap all integers into single quotes (I really don't know why)
    public static String wrapIntegersInQuotes(String jsonString) {
        StringBuilder result = new StringBuilder();
        boolean insideQuotes = false;
        for (char c : jsonString.toCharArray()) {
            if (c == '\'') {
                insideQuotes = !insideQuotes;
            }
            if (!insideQuotes && Character.isDigit(c)) {
                result.append("'");
            }
            result.append(c);
            if (!insideQuotes && Character.isDigit(c)) {
                result.append("'");
            }
        }
        return result.toString();
    }

    public static void main(java.lang.String[] strings) {
        // Deserialize users, posts and comments
        Users = jsonToArrayList(usersFilePath, Utilizator[].class);
        Posts = jsonToArrayList(postsFilePath, Postare[].class);
        Comments = jsonToArrayList(commentsFilePath, Comentariu[].class);
        // Initialize static ids
        if (!Users.isEmpty()) {
            Utilizator.setNextIdUsers(Users.get(Users.size() - 1).getId());
        } else {
            Utilizator.setNextIdUsers(0);
        }
        if (!Posts.isEmpty()) {
            Postare.setNextIdPosts(Posts.get(Posts.size() - 1).getId());
        } else {
            Postare.setNextIdPosts(0);
        }
        if (!Comments.isEmpty()) {
            Comentariu.setNextIdComm(Comments.get(Comments.size() - 1).getId());
        } else {
            Comentariu.setNextIdComm(0);
        }
        Gson gson = new Gson();
        if (strings == null) {
            System.out.println("Hello world!");
        } else {
            // Match each command with a switch on the first arg
            String command = strings[0];
            switch (command) {
                case "-create-user":
                    if (strings.length == 1) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Please provide username"))));
                    } else if (strings.length == 2) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Please provide password"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Check if a user with the provided username already exists
                        if (userAlreadyExists(Users, username)) {
                            // Create a new user with the provided credentials
                            Utilizator newUser = new Utilizator(username, password);
                            Users.add(newUser);
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "User created successfully"))));
                            writeToFile(writeClassAsJson(Users), usersFilePath);
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "User already exists"))));
                        }
                    }
                    break;
                case "-create-post":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No text provided"))));
                            } else if (getParam(strings[3]).length() > 300) {
                                // Check if text is post text is greater than 300 ch
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Post text length exceeded"))));
                            } else {
                                // Create the new post
                                Postare post = new Postare(getParam(strings[3]), currentUser.getUsername());
                                Posts.add(post);
                                currentUser.addCreatedPost(post.getId());
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Post added successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Posts), postsFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-delete-post-by-id":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No identifier was provided"))));
                            } else if (!currentUser.checkValidPost(Integer.parseInt(getParam(strings[3])))) {
                                // Check if the currentUser is the user who created the post
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The identifier was not valid"))));
                            } else {
                                // Delete the post
                                currentUser.deletePost(Posts, Integer.parseInt(getParam(strings[3])));
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Post deleted successfully"))));
                                if (!Posts.isEmpty())
                                    writeToFile(writeClassAsJson(Posts), postsFilePath);
                                else
                                    writeToFile("", postsFilePath);
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-follow-user-by-username":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No username to follow was provided"))));
                            } else if (!currentUser.checkValidUserFollow(Users, getParam(strings[3]))) {
                                // Check if the username provided actually exists and the currentUser is not following him yet
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The username to follow was not valid"))));
                            } else {
                                // Follow the user
                                currentUser.follow(Users, getParam(strings[3]));
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-unfollow-user-by-username":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No username to unfollow was provided"))));
                            } else if (!currentUser.checkValidUserUnfollow(getParam(strings[3]))) {
                                // Check if the currentUser is following the username provided to unfollow
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The username to unfollow was not valid"))));
                            } else {
                                // Unfollow the user
                                currentUser.unfollow(Users, getParam(strings[3]));
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-comment-post":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No text provided"))));
                            } else if (getParam(strings[4]).length() > 300) {
                                // Check if the
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Comment text length exceeded"))));
                            } else {
                                // Comment the post
                                currentUser.addComment(Posts, Comments, Integer.valueOf(getParam(strings[3])), getParam(strings[4]));
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Comment added successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Posts), postsFilePath);
                                writeToFile(writeClassAsJson(Comments), commentsFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-delete-comment-by-id":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No identifier was provided"))));
                            } else if (!currentUser.checkValidComment(Integer.parseInt(getParam(strings[3])))) {
                                // Check if the currentUser actually is the owner of the provided comment
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The identifier was not valid"))));
                            } else {
                                // Delete the comment
                                currentUser.deleteComment(Posts, Comments, Integer.valueOf(getParam(strings[3])));
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Posts), postsFilePath);
                                if (Comments.isEmpty()) {
                                    writeToFile("", commentsFilePath);
                                } else {
                                    writeToFile(writeClassAsJson(Comments), commentsFilePath);
                                }
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-like-post":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No post identifier to like was provided"))));
                            } else if (getPost(Posts, Integer.parseInt(getParam(strings[3]))) == null || currentUser.alreadyLikedPost(Integer.parseInt(getParam(strings[3])))) {
                                // Check if the post actually exists and is not already liked
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The post identifier to like was not valid"))));
                            } else {
                                // Get the post and like it
                                Postare post = getPost(Posts, Integer.parseInt(getParam(strings[3])));
                                post.like(currentUser);
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Posts), postsFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-unlike-post":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No post identifier to unlike was provided"))));
                            } else if (getPost(Posts, Integer.parseInt(getParam(strings[3]))) == null || !currentUser.alreadyLikedPost(Integer.parseInt(getParam(strings[3])))) {
                                // Check if the post actually exists and if the currentUser liked it already
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The post identifier to unlike was not valid"))));
                            } else {
                                // Get the post and unlike it
                                Postare post = getPost(Posts, Integer.parseInt(getParam(strings[3])));
                                post.unlike(currentUser);
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Posts), postsFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-like-comment":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No comment identifier to like was provided"))));
                            } else if (getComment(Comments, Integer.parseInt(getParam(strings[3]))) == null || currentUser.alreadyLikedComment(Integer.parseInt(getParam(strings[3])))) {
                                // Check if the comment actually exists and is not already liked
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The comment identifier to like was not valid"))));
                            } else {
                                // Get the comment and like it
                                Comentariu comment = getComment(Comments, Integer.parseInt(getParam(strings[3])));
                                comment.like(currentUser);
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Comments), commentsFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-unlike-comment":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No comment identifier to unlike was provided"))));
                            } else if (getComment(Comments, Integer.parseInt(getParam(strings[3]))) == null || !currentUser.alreadyLikedComment(Integer.parseInt(getParam(strings[3])))) {
                                // Check if the comment actually exists and if the currentUser liked it already
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The comment identifier to unlike was not valid"))));
                            } else {
                                // Get the comment and unlike it
                                Comentariu comment = getComment(Comments, Integer.parseInt(getParam(strings[3])));
                                comment.unlike(currentUser);
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Operation executed successfully"))));
                                writeToFile(writeClassAsJson(Users), usersFilePath);
                                writeToFile(writeClassAsJson(Comments), commentsFilePath);
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-following":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            // Get its current following list
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", currentUser.getFollowing()))));
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-followers":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                // Get its current followers list
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No username to list followers was provided"))));
                            } else {
                                if (getUser(Users, getParam(strings[3])) == null) {
                                    System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The username to list followers was not valid"))));
                                } else {
                                    Utilizator userGetFollowers = getUser(Users, getParam(strings[3]));
                                    System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", userGetFollowers.getFollowers()))));
                                }
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-most-liked-posts":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            // Get the 5 most liked posts
                            System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getMostLikedPosts(Posts))))));
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-most-commented-posts":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            // Get 5 most commented posts
                            System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getMostCommentedPosts(Posts))))));
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-most-followed-users":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            // Get 5 most followed users
                            System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getMostFollowedUsers(Users))))));
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-user-posts":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No username to list posts was provided"))));
                            } else {
                                if (getUser(Users, getParam(strings[3])) == null || !currentUser.getFollowing().contains(getParam(strings[3]))) {
                                    // Check if the username actually exists and the currentUser is following him
                                    System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The username to list posts was not valid"))));
                                } else {
                                    // Get all the user posts
                                    System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getUserPosts(Posts, getParam(strings[3])))))));
                                }
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-followings-posts":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getFollowingPosts(Posts, Users, currentUser))))));
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-most-liked-users":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            // Get 5 most liked users (posts + comments)
                            System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getMostLikedUsers(Users, Posts, Comments))))));
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-get-post-details":
                    if (strings.length < 3) {
                        System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "You need to be authenticated"))));
                    } else {
                        String username = getParam(strings[1]);
                        String password = getParam(strings[2]);
                        // Login the user
                        Utilizator currentUser = loginUser(Users, username, password);
                        if (currentUser != null) {
                            if (strings.length == 3) {
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "No post identifier was provided"))));
                            } else if (getPost(Posts, Integer.parseInt(getParam(strings[3]))) == null) {
                                // Check if the post actually exists
                                System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "The post identifier was not valid"))));
                            } else {
                                // Get all details of the provided post
                                System.out.println(wrapIntegersInQuotes(replaceWithSingle(gson.toJson(new Validator("ok", getPostDetails(Posts, Comments, getParam(strings[3])))))));
                            }
                        } else {
                            System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Login failed"))));
                        }
                    }
                    break;
                case "-cleanup-all":
                    // Reset all data stored in .json files
                    writeToFile("", usersFilePath);
                    writeToFile("", postsFilePath);
                    writeToFile("", commentsFilePath);
                    System.out.println(replaceWithSingle(gson.toJson(new Validator("ok", "Cleanup finished successfully"))));
                    break;
                default:
                    System.out.println(replaceWithSingle(gson.toJson(new Validator("error", "Incorrect command"))));
                    break;
            }
        }
    }
}